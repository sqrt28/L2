#!/usr/bin/python3

import os
import tempfile
import unittest

def file_cat(path_in):
    with open(path_in, 'r') as fd:
        for ligne in fd.read():
            print(ligne, end='')

def file_copy(path_in, path_out):
    with open(path_in, 'rb') as file_in:
        with open(path_out, 'wb') as file_out:
            file_out.write(file_in.read())

def file_move(path_in, path_out):
    with open(path_in) as f_in:
        lignes = f_in.readlines()
    os.remove(path_in)
    with open(path_out,"w") as f_out:
        f_out.writelines(lignes)

def file_find(path, filename):
    for root, dirs, files in os.walk(path):
        for name in files:
            if name == filename:
                print(os.path.join(root,name))
        for name in dirs:
            return file_find(os.path.join(root,name),filename)

def file_diff(path_a, path_b):
    with open(path_a,"r") as fd:
        with open(path_b,"r") as fs:
            return (fd.readlines()== fs.readlines())
        


def file_sed_char(path, target, modif):
    with open(path, 'r') as file1:
        contents = file1.read()
        contents = contents.replace(target, modif)
    with open(path, 'w') as file1:
        file1.write(contents)

def file_sed_string(path, target, modif):
    with open(path, 'r') as file1:
        contents = file1.read()
        contents = contents.replace(target, modif)
    with open(path, 'w') as file2:
        file2.write(contents)

def file_grep_char(path_in, target):
     with open(path_in,"r") as fd:
        lignes = fd.readlines()
        cpt = 0
        for ligne in lignes:
            for c in ligne:
                if c == target:
                    print(cpt+1)
                cpt+=1

def file_grep_string(path_in, target):
    with open(path_in,"r") as fd:
        lignes = fd.readlines()
        cpt_line = 0
        for ligne in lignes:
            cpt_line +=1
            cpt_inline = 0
            for c in ligne:
                if c == target:
                    print(cpt_line,cpt_inline)
                cpt_inline+=1

def file_grep_line(path_in, target):
    with open(path_in,"r") as fd:
        lignes = fd.readlines()
        for ligne in lignes:
            if target == ligne[:-1]:
                return True
    return False

class TestBasicFileGrepString(unittest.TestCase):
    def test_empty_file(self):
        tmp_f = tempfile.NamedTemporaryFile()
        tmp_f.flush()

        prev = os.dup(1)
        os.close(1)
        _ = os.open('__buffer__', os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
        file_grep_string(tmp_f.name, 'a')
        os.dup2(prev, 1)

        tmp_f.close()
        with open('__buffer__') as exec_res:
            good_lines = []
            exec_lines = exec_res.readlines()
            self.assertListEqual(good_lines, exec_lines)
        
        os.unlink('__buffer__')

    def test_simple_search(self):
        tmp_f = tempfile.NamedTemporaryFile(mode='w')
        tmp_f.writelines([
            "123\n",
            "abc\n",
            "ABC\n"
        ])
        tmp_f.flush()

        prev = os.dup(1)
        os.close(1)
        _ = os.open('__buffer__', os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
        file_grep_string(tmp_f.name, 'abc')
        os.dup2(prev, 1)

        tmp_f.close()
        with open('__buffer__') as exec_res:
            good_lines = ['1:0\n']
            exec_lines = exec_res.readlines()
            self.assertListEqual(good_lines, exec_lines)
