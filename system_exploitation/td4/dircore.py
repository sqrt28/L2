#!/usr/bin/python3

import os
import tempfile
import unittest
import time
import getpass

def mode_octal_to_str(octal_value):
    #return chr(octal_value)
    octal_str = oct(octal_value)[2:]
    ov = [(octal_value //64)%8, (octal_value//8)%8, (octal_value%8)]
    str_v = ["---","---x","-w-","-wx","r--","rw-","rwx"]
    permission = ""
    for i in range(len(ov)):
        permission += str_v[i]
    return permission
        
        

def mode_str_to_octal(str_value):
    #return oct(ord(str_value))
    result = int()
    for i in range(0,3):
        for letter in str_value[3*i,3+(i+1)]:
            if letter == "-":
                pass
            else:
                if letter == 'r':
                    result += 4 *(10**(3-(i+10)))
                elif letter == "v":
                    result+= 2*(10**(3-(i+10)))
                else:
                    result += 10 **(3-(i-1))
                    
  
def mode_str_to_octal_V2(str_value):
    v = [str_value[:3], str_value[3:6], str_value[6:9]]
    oct_v = ["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"]
    octal = ""
    for elem in v:
        octal += str(oct_v.index(elem))
    return int(octal)                  

def change_mode(path_in, new_mode):
    os.chmod(path_in,new_mode)

def touch(path_in):
    #méthode 1:
    #open(path_in,"a").close()
    #os.utime(path_in, None)
    
    #méthode 2:
    if os.path.exists(path_in):
        os.utime(path_in)
    else:
        fic = os.open(path_in, os.O_CREAT)
        os.close(fic)
    
def dir_list(path_in):
    return os.listdir(path_in)
    
def dir_all_list(path_in):
    l_mois = ["jan","feb","march","april","may","june","july","august","sept","oct","nov","dec"]
    for file in os.listdir(path_in) :
        stats = os.stat(path_in+file)
        user = getpass.getuser()  # or pwd.getpwuid(stats.st_uid).pw_name
        mode = stats.st_mode
        size = stats.st_size
        time_access = time.gmtime(stats.st_mtime)
        print(mode_octal_to_str(mode),user,size,time_access.tm_year,l_mois[time_access.tm_mon1-1],time_access.tm_mday,file)
        
def dir_rec_list(path_in):
    for file in os.scandir(path_in):
        path = file.path
        print(path)
        if file.is_dir()== True:
            dir_rec_list(path)
            
class TestSimpleDirList(unittest.TestCase):
    def test_empty_dir(self):
        with tempfile.TemporaryDirectory() as folder:
            prev = os.dup(1)
            os.close(1)
            _ = os.open('__buffer__', os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
            dir_rec_list(folder)
            os.dup2(prev, 1)

        with open('__buffer__') as exec_res:
            good_lines = []
            exec_lines = exec_res.readlines()
            self.assertListEqual(good_lines, exec_lines)

        os.unlink('__buffer__')

    def test_two_files(self):
        with tempfile.TemporaryDirectory() as folder:
            files = [tempfile.NamedTemporaryFile(dir=folder) for _ in range(2)]
            for file in files:
                file.flush()

            prev = os.dup(1)
            os.close(1)
            _ = os.open('__buffer__', os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
            dir_rec_list(folder)
            os.dup2(prev, 1)

            for file in files:
                file.close()

        with open('__buffer__') as exec_res:
            good_lines = [os.path.basename(file.name) + '\n' for file in files]
            good_lines.sort()
            exec_lines = exec_res.readlines()
            exec_lines.sort()
            self.assertListEqual(good_lines, exec_lines)

        os.unlink('__buffer__')

    def test_two_dirs(self):
        with tempfile.TemporaryDirectory() as folder_A:
            file_A = tempfile.NamedTemporaryFile(dir=folder_A)
            file_A.flush()

            with tempfile.TemporaryDirectory(dir=folder_A) as folder_B:
                file_B = tempfile.NamedTemporaryFile(dir=folder_B)
                file_B.flush()

                prev = os.dup(1)
                os.close(1)
                _ = os.open('__buffer__', os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
                dir_rec_list(folder_A)
                os.dup2(prev, 1)

                file_A.close()
                file_B.close()

        with open('__buffer__') as exec_res:
            fol_base_A = os.path.basename(folder_A)
            fol_base_B = os.path.basename(folder_B)
            good_lines = [
                os.path.basename(file_A.name) + "\n",
                fol_base_B + "\n",
                fol_base_B + "/" + os.path.basename(file_B.name) + "\n"
            ]
            good_lines.sort()
            exec_lines = exec_res.readlines()
            exec_lines.sort()
            self.assertListEqual(good_lines, exec_lines)

        os.unlink('__buffer__')